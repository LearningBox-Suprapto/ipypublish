#!/usr/bin/env python
import sys, os, logging
from ipypublish.scripts.reveal_serve import RevealServer
from ipypublish.main import publish

def nbpresent(inpath, 
              outformat='slides_standard',
              outpath=None, dump_files=False,
              ignore_prefix='_',
              loglevel='INFO'):
    """ load reveal.js slides as a web server, converting from ipynb first if path extension is .ipynb
    
    Parameters
    ----------
    inpath: str
        path to html or ipynb file
    outformat: str
        conversion format to use
    outpath : path_like
        path to output converted files
    dump_files: bool
        whether to write files from nbconvert (containing images, etc) to outpath
    ignore_prefix: str
        ignore ipynb files with this prefix                
    loglevel: str
        the logging level (debug, info, critical, ...)
    
    """
    root = logging.getLogger()
    root.setLevel(logging.DEBUG)
    slogger = logging.StreamHandler(sys.stdout)
    slogger.setLevel(getattr(logging,loglevel.upper()))
    formatter = logging.Formatter('%(levelname)s:%(module)s:%(message)s')
    slogger.setFormatter(formatter)
    root.addHandler(slogger)
    
    inpath_name, inpath_ext  = os.path.splitext(os.path.basename(inpath))
    print(inpath_ext)
    if inpath_ext == '.ipynb':
        outdir = os.path.join(os.getcwd(),'converted') if outpath is None else outpath 
        if not os.path.exists(outdir):
            os.mkdir(outdir)
        flogger = logging.FileHandler(os.path.join(outdir,inpath_name+'.nbpub.log'), 'w')
        flogger.setLevel(getattr(logging,loglevel.upper()))
        root.addHandler(flogger)
        inpath  = publish(inpath,
                          outformat=outformat,
                          outpath=outpath, dump_files=dump_files,
                          ignore_prefix=ignore_prefix,
                          create_pdf=False)

    server = RevealServer()
    server.serve(inpath)
    
if __name__ == '__main__':
    import funcargparse
    from funcargparse import FuncArgParser
    parser = FuncArgParser()
    parser.setup_args(nbpresent)
    parser.update_short(outformat='f')
    parser.update_short(outpath='o')    
    parser.update_short(dump_files='d')
    parser.create_arguments()
    parser.parse2func()
